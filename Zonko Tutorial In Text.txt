
//This is my C# tutorial using the most popular C# framework, the .Net Framework
//A Framework, is a set of libraries, tools, methods, and different types
//
//C# Is an Object Oriented Programming Language (OOP), meaning it uses objects, such as classes, voids, and namespaces, to contain data
//
//"using" is so you can let the computer know what types it's using from the C# .Net library
//For example, using System; lets the computer know we now have direct access to the methods in the System type
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//Namespace is just for organization
namespace ZonkoTutorial
{
    //A class, is a designated structure for "type based" coding
    //Types are nice for organization and modularity to contain functions, the C# type system is why we use C# in the first place
    //"class Program" means Program is now a type in which all of its code can be executed within
    //This class is a new class we are making, so it can be named anything and doesn't have to be called Program
    //But for the sake of the tutorial, it will be kept as is
    class Program
    {
        //In programming, there are many different types of data variables to use, to let the computer know what you're doing
        //the public type, means it can be instantiated and used in other classes or methods outside of it's inherent object

        //A string, is used to let the computer know you're dealing with text
        //Strings can be designated with the doule quotes or single quotes "" ''
        public static string ThisIsText = "My Name Zonko";
        //A float, is used to let the computer know you're dealing with a floating number, the number must an 'f' after it, designating that it's a float
        public static float ThisIsAFloat = 5.5f;
        //An int, is used to let the computer know you're dealing with an integer
        public static int ThisIsAnInt = 1;
        //A double, is used to let the computer know you're dealing with a double precision float
        public static double ThisIsADouble = 50;
        //A Bool, is used to let the computer know you're dealing with a true or false variable
        public static bool ThisIsABool = true;
        //These are some of the major variables that are commonly used, but there are many more

        //the '=' is used to set a variable equal to a related variable
        //for example we can't set an int equal to a string

        //The Main method is a designated method in C#, it tells the computer where to execute and start the code
        //It's important in any programming language to let the computer know where to start

        //This static void Main() is a method of the type Program
        //static, means it's associated to this type (Program) only, and cannot be instantiated using an object
        //void, is a data type that lets the computer know that this is a method that does not inherently return a value
        //void, as the name implies, is an object that is used to write various functions, hence why they are called methods.
        //The parenthesis is used in void methods to let the computer know it can pass data through it
        static void Main()
        {
            //We will clear the program once it starts for when we re-instantiate the Main() method
            Console.Clear();
            //in here, the program will execute Main() and then immediately close once it's done if we have nothing telling it to keep it open
            //To keep the program open, we can make the program infinitely read a line, and it will close once the line is read
            //or when the enter key is pressed
            //We do this by first passing in the type, "Console", and then using its method, "ReadLine()"
            //never forget your semicolons to let the computer know you're done writing ;;;;
            //Console.ReadLine();
            //ultimately this is unideal, it's a very basic way of having the program loop, but for the sake of the tutorial we will keep this

            //Here we write lines in the console to make use of the variables we wrote in the class
            Console.WriteLine("Your String Is: " + ThisIsText);
            Console.WriteLine("Your Float Is: " + ThisIsAFloat.ToString());
            Console.WriteLine("Your Int Is: " + ThisIsAnInt.ToString());
            Console.WriteLine("Your Double Is: " + ThisIsADouble.ToString());
            Console.WriteLine("Your Bool Is: " + ThisIsABool.ToString());

            //this is just for a spacer
            Console.WriteLine("---------------------------------");
            Console.WriteLine("");

            //We will make a simple adder and subtractor
            //
            //We will allow the user to choose adding or subtracting by reading a string
            Console.WriteLine("Do you want to subtract or add? (enter your answer)");
            //.ToLower() is used to set the reading input to lowercase no matter what
            string answer = Console.ReadLine().ToLower();
            
            //We use the if statement to define conditional functions, then put the conditions in the parenthesis
            //.ToLower is used to set the  
            if(answer.Contains("add"))
                //The curly brackets {} are used to contain objects
            {
                pageAdd();
            }
            if (answer.Contains("subtract"))
            {
                pageSubtract();
            }




            //The computer reads the code from top to bottom, so we will put this here so other code can be activated prior
            //We can eventually use a threading loop, which is a lot more professional than using readline to keep the program open
            //I will not cover that here though, just the basics
            Console.ReadLine();
            //We will have the program restart the main method, by instantiating the method after it's done, so it doesn't close
            Main();
        }


        //we will write a console page for adding and subtraction
        public static void pageAdd()
        {
            Console.Clear();

            //the try and catch, is to account for possible errors to avoid crashing or bugs
            try
            {
                Console.Write("Enter Number 1: ");
                //to convert the float to a string, we must parse it as a float
                float number1 = float.Parse(Console.ReadLine());

                Console.Write("Enter Number 2: ");
                float number2 = float.Parse(Console.ReadLine());

                //There are many different string instructions like \n which means to write a new line
                Console.WriteLine("\n Your Added Result Is: " + Add(number1, number2).ToString());
                Console.WriteLine("---------------------------- \n Press Enter To Main");
            }
            catch
            {
                Console.WriteLine("YOU DID NOT ENTER A VALID NUMBER");
            }
        }

        public static void pageSubtract()
        {
            Console.Clear();

            try
            {
                Console.Write("Enter Number 1:");
                float number1 = float.Parse(Console.ReadLine());

                Console.Write("Enter Number 2:");
                float number2 = float.Parse(Console.ReadLine());


                Console.WriteLine("\n Your Subtracted Result Is: " + Subtract(number1, number2).ToString());
                Console.WriteLine("---------------------------- \n Press Enter To Main");
            }
            catch
            {
                Console.WriteLine("YOU DID NOT ENTER A VALID NUMBER");
            }
        }




        //we will make a float method for subtraction and addition

        public static float Subtract(float number1, float number2)
        {
            float result = number1 - number2;

            //return will set the Subtract() float equal to the return value
            return result;
        }

        public static float Add(float number1, float number2)
        {
            float result = number1 + number2;

            return result;
        }
    }
}
